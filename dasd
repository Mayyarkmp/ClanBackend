[1mdiff --git a/branches/users/models/manager.py b/branches/users/models/manager.py[m
[1mindex 1f43938..82a1ee3 100644[m
[1m--- a/branches/users/models/manager.py[m
[1m+++ b/branches/users/models/manager.py[m
[36m@@ -1,10 +1,85 @@[m
[32m+[m[32mfrom branches.models import Branch[m
[32m+[m[32mfrom branches.serializers import BranchSerializer[m
[32m+[m[32mfrom branches.users.models.branch_user import Status[m
[32m+[m[32mfrom branches.users.serializers import ManagerSerializer[m
[32m+[m[32mfrom core.base import viewsets[m
 from . import BranchUser, BranchUserManager[m
 from django.contrib.gis.db import models[m
[32m+[m[32mfrom rest_framework.response import Response[m
[32m+[m[32mfrom rest_framework import status[m
[32m+[m[32mfrom rest_framework.decorators import action[m
 [m
 [m
[32m+[m[32m# Modified[m
 class BranchManagerManager(BranchUserManager):[m
[31m-    pass[m
[32m+[m[32m    def create(self, **kwargs):[m
[32m+[m[32m        branch_data = kwargs.pop("branch_data", None)[m
[32m+[m[32m        manager = super().create(**kwargs)[m
[32m+[m[32m        if branch_data:[m
[32m+[m[32m            Branch.objects.create(manager=manager, **branch_data)[m
[32m+[m[32m        return manager[m
 [m
 [m
 class Manager(BranchUser):[m
     objects = BranchManagerManager()[m
[32m+[m
[32m+[m[32m    def activate(self):[m
[32m+[m[32m        if not self.is_email_verified and not self.is_phone_number_verified:[m
[32m+[m[32m            raise ValueError("Manager must verify email or phone number")[m
[32m+[m[32m        self.status = Status.ACTIVE[m
[32m+[m[32m        self.save()[m
[32m+[m
[32m+[m
[32m+[m[32m# Handle email or phone verification[m
[32m+[m[32mdef verify_account(manager: Manager, verification_data):[m
[32m+[m[32m    if "email" in verification_data:[m
[32m+[m[32m        manager.is_email_verified = True[m
[32m+[m[32m        manager.email_authentication = True[m
[32m+[m[32m    elif "phone_number" in verification_data:[m
[32m+[m[32m        manager.is_phone_number_verified = True[m
[32m+[m[32m        manager.phone_number_authentication = True[m
[32m+[m
[32m+[m[32m    manager.activate()  # Make the manager active if the verification is successful[m
[32m+[m
[32m+[m
[32m+[m[32mclass ManagerSignupViewSet(viewsets.ModelViewSet):[m
[32m+[m[32m    serializer_class = ManagerSerializer()[m
[32m+[m
[32m+[m[32m    def create(self, request, *args, **kwargs):[m
[32m+[m[32m        data = request.data[m
[32m+[m[32m        # Here you can include the branch data in the request payload[m
[32m+[m[32m        manager = Manager.objects.create([m
[32m+[m[32m            email=data["email"],[m
[32m+[m[32m            phone_number=data.get("phone_number"),[m
[32m+[m[32m            password=data["password"],[m
[32m+[m[32m            branch_data=data.get("branch"),[m
[32m+[m[32m        )[m
[32m+[m[32m        # You can send a verification link via email or SMS here.[m
[32m+[m[32m        return Response([m
[32m+[m[32m            {"message": "Account created. Please verify your email or phone."},[m
[32m+[m[32m            status=status.HTTP_201_CREATED,[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m
[32m+[m[32mclass ManagerViewSet(viewsets.ModelViewSet):[m
[32m+[m[32m    queryset = Manager.objects.all()[m
[32m+[m[32m    serializer_class = ManagerSerializer[m
[32m+[m
[32m+[m[32m    @action(detail=True, methods=["post"])[m
[32m+[m[32m    def verify(self, request, pk=None):[m
[32m+[m[32m        manager = self.get_object()[m
[32m+[m[32m        verify_account(manager, request.data)[m
[32m+[m[32m        return Response({"message": "Account verified."}, status=status.HTTP_200_OK)[m
[32m+[m
[32m+[m
[32m+[m[32m# views.py[m
[32m+[m
[32m+[m
[32m+[m[32mclass BranchViewSet(viewsets.ModelViewSet):[m
[32m+[m[32m    serializer_class = BranchSerializer()[m
[32m+[m
[32m+[m[32m    def get_queryset(self):[m
[32m+[m[32m        user = self.request.user[m
[32m+[m[32m        if not user.is_authenticated or user.status != Status.ACTIVE:[m
[32m+[m[32m            return Branch.objects.none()[m
[32m+[m[32m        return Branch.objects.filter(manager=user)[m
[1mdiff --git a/customers/auth/views.py b/customers/auth/views.py[m
[1mindex d9ff987..d12588f 100644[m
[1m--- a/customers/auth/views.py[m
[1m+++ b/customers/auth/views.py[m
[36m@@ -184,7 +184,6 @@[m [mclass AppleAuth(generics.GenericAPIView):[m
                 first_name = apple_data.get("given_name")[m
                 last_name = apple_data.get("family_name")[m
                 apple_id = apple_data.get("sub")[m
[31m-[m
                 user, created = Customer.objects.get_or_create([m
                     apple_id=apple_id,[m
                     defaults={[m
[36m@@ -196,6 +195,7 @@[m [mclass AppleAuth(generics.GenericAPIView):[m
                     },[m
                 )[m
 [m
[32m+[m[32m                user.is_email_verified = True[m
                 if not created:[m
                     user.apple_authentication = True[m
                     user.save()[m
[1mdiff --git a/docker-compose.yml b/docker-compose.yml[m
[1mindex 822b2a8..9322282 100644[m
[1m--- a/docker-compose.yml[m
[1m+++ b/docker-compose.yml[m
[36m@@ -1,7 +1,7 @@[m
 services:[m
   server:[m
     image: clan-backend[m
[31m-    container_name: server [m
[32m+[m[32m    container_name: server[m
     env_file: &app-environment[m
       - .env.docker[m
     depends_on: &app-depends-on[m
[36m@@ -9,7 +9,7 @@[m [mservices:[m
       - dashboard[m
     command: "gunicorn clan.wsgi --bind 0.0.0.0:8000 --workers 4 --threads 4"[m
     healthcheck:[m
[31m-      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck/"][m
[32m+[m[32m      test: [ "CMD", "curl", "-f", "http://localhost:8000/healthcheck/" ][m
       interval: 5s[m
     ports:[m
       - 8000:8000[m
[36m@@ -18,7 +18,6 @@[m [mservices:[m
     volumes: &app-volumes[m
       - .:/app[m
     user: root[m
[31m-    [m
 [m
   # worker:[m
   #   image: clan-backend[m
[36m@@ -29,7 +28,7 @@[m [mservices:[m
   #   networks: *app-networks[m
   #   volumes: *app-volumes[m
   #   user: root[m
[31m-  [m
[32m+[m
   # beat:[m
   #   image: clan-backend[m
   #   container_name: beat[m
[36m@@ -40,10 +39,10 @@[m [mservices:[m
   #   volumes: *app-volumes[m
   #   user: root[m
 [m
[31m-  [m
[32m+[m
   daphne:[m
     image: clan-backend[m
[31m-    container_name: daphne [m
[32m+[m[32m    container_name: daphne[m
     env_file: *app-environment[m
     environment: *app-environment[m
     depends_on: *app-depends-on[m
[36m@@ -52,7 +51,6 @@[m [mservices:[m
     volumes: *app-volumes[m
     user: root[m
 [m
[31m-[m
   redis:[m
     restart: unless-stopped[m
     container_name: redis[m
[36m@@ -61,7 +59,6 @@[m [mservices:[m
       - 6379[m
     networks: *app-networks[m
 [m
[31m-[m
   nginx:[m
     image: nginx:latest[m
     container_name: nginx[m
[36m@@ -71,7 +68,7 @@[m [mservices:[m
     volumes:[m
       - ./nginx/default.conf:/etc/nginx/nginx.conf:ro[m
       - ./certs:/etc/nginx/ssl[m
[31m-      - ./certbot/www:/var/www/certbot   # ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß ÿßŸÑŸÖÿ≥ÿßÿ± ŸÑÿ™ŸàŸÅŸäÿ± ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ™ÿ≠ŸÇŸÇ[m
[32m+[m[32m      - ./certbot/www:/var/www/certbot # ÿ•ÿ∂ÿßŸÅÿ© Ÿáÿ∞ÿß ÿßŸÑŸÖÿ≥ÿßÿ± ŸÑÿ™ŸàŸÅŸäÿ± ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ™ÿ≠ŸÇŸÇ[m
     depends_on:[m
       - server[m
       - daphne[m
[36m@@ -92,7 +89,7 @@[m [mservices:[m
   #   depends_on:[m
   #     - nginx[m
   #   networks: *app-networks[m
[31m-  [m
[32m+[m
   dashboard:[m
     image: clan-dashboard[m
     container_name: dashboard[m
[36m@@ -106,7 +103,7 @@[m [mservices:[m
     command: "npm run start"[m
     env_file:[m
       - dashboard.env[m
[31m-    networks: *app-networks [m
[32m+[m[32m    networks: *app-networks[m
 [m
   site:[m
     image: clan-site[m
[36m@@ -114,8 +111,8 @@[m [mservices:[m
     ports:[m
       - 3001:3000[m
     command: "npm run start"[m
[31m-    networks: *app-networks [m
[31m-    [m
[32m+[m[32m    networks: *app-networks[m
[32m+[m
 networks:[m
   clan:[m
     driver: bridge[m
[1mdiff --git a/orders/models.py b/orders/models.py[m
[1mindex 4a99044..d8682b0 100644[m
[1m--- a/orders/models.py[m
[1m+++ b/orders/models.py[m
[36m@@ -136,13 +136,17 @@[m [mclass Cart(TimeStampedModel):[m
     def save(self, *args, **kwargs):[m
         # Ensure only one open cart per customer[m
         if self.status == self.Status.OPEN:[m
[31m-            Cart.objects.filter(customer=self.customer, status=self.Status.OPEN).update(status=self.Status.CLOSED)[m
[32m+[m[32m            Cart.objects.filter(customer=self.customer, status=self.Status.OPEN).update([m
[32m+[m[32m                status=self.Status.CLOSED[m
[32m+[m[32m            )[m
 [m
         super().save(*args, **kwargs)[m
 [m
     def mark_as_open(self):[m
         # Close all other carts for this customer and mark this one as open[m
[31m-        Cart.objects.filter(customer=self.customer, status=self.Status.OPEN).update(status=self.Status.CLOSED)[m
[32m+[m[32m        Cart.objects.filter(customer=self.customer, status=self.Status.OPEN).update([m
[32m+[m[32m            status=self.Status.CLOSED[m
[32m+[m[32m        )[m
         self.status = self.Status.OPEN[m
         self.save()[m
 [m
[36m@@ -153,7 +157,6 @@[m [mclass Cart(TimeStampedModel):[m
 [m
     def is_open(self):[m
         return self.status == self.Status.OPEN[m
[31m-        [m
 [m
 [m
 class CartPromotion(TimeStampedModel):[m
